#include "ecdsa_module.h"

/*
sm2 keys:
private key: 0x6151a5af80939e29ac8cf45ae32c2d755341478b1629de0ca4a71397b08c2e3a
public key: 0x3f58b8fb1c0fbc6bd17216db08be2e0722004440770791241f966dd154c55e50,0x6108cdb581bc0c358fcc7165dfe189ef5e7e9564958b84ea5510b5c7f3aabb5b
*/

const int key_len2 = 121;
const int key_len = 96;
u8 test_key2[] = "\x30\x77\x02\x01\x01\x04\x20\xc9\xaf\xa9\xd8\x45\xba\x75\x16\x6b"
	"\x5c\x21\x57\x67\xb1\xd6\x93\x4e\x50\xc3\xdb\x36\xe8\x9b\x12\x7b"
	"\x8a\x62\x2b\x12\x0f\x67\x21\xa0\x0a\x06\x08\x2a\x86\x48\xce\x3d"
	"\x03\x01\x07\xa1\x44\x03\x42\x00\x04\x60\xfe\xd4\xba\x25\x5a\x9d"
	"\x31\xc9\x61\xeb\x74\xc6\x35\x6d\x68\xc0\x49\xb8\x92\x3b\x61\xfa"
	"\x6c\xe6\x69\x62\x2e\x60\xf2\x9f\xb6\x79\x03\xfe\x10\x08\xb8\xbc"
	"\x99\xa4\x1a\xe9\xe9\x56\x28\xbc\x64\xf2\xf1\xb2\x0c\x2d\x7e\x9f"
	"\x51\x77\xa3\xc2\x94\xd4\x46\x22\x99"; // for nist p256


/*u8 test_key[] = "\x30\x77\x02\x01\x01\x04\x20\x61\x51\xa5\xaf\x80\x93\x9e\x29\xac"
    "\x8c\xf4\x5a\xe3\x2c\x2d\x75\x53\x41\x47\x8b\x16\x29\xde\x0c\xa4"
	"\xa7\x13\x97\xb0\x8c\x2e\x3a\xa0\x0a\x06\x08\x2a\x86\x48\xce\x3d"
	"\x03\x01\x07\xa1\x44\x03\x42\x00\x04\x3f\x58\xb8\xfb\x1c\x0f\xbc"
	"\x6b\xd1\x72\x16\xdb\x08\xbe\x2e\x07\x22\x00\x44\x40\x77\x07\x91"
	"\x24\x1f\x96\x6d\xd1\x54\xc5\x5e\x50\x61\x08\xcd\xb5\x81\xbc\x0c"
	"\x35\x8f\xcc\x71\x65\xdf\xe1\x89\xef\x5e\x7e\x95\x64\x95\x8b\x84"
	"\xea\x55\x10\xb5\xc7\xf3\xaa\xbb\x5b"; // for sm2 curve
*/

/*u8 test_key[] = "\x61\x51\xa5\xaf\x80\x93\x9e\x29\xac"
    "\x8c\xf4\x5a\xe3\x2c\x2d\x75\x53\x41\x47\x8b\x16\x29\xde\x0c\xa4"
	"\xa7\x13\x97\xb0\x8c\x2e\x3a\x3f\x58\xb8\xfb\x1c\x0f\xbc"
	"\x6b\xd1\x72\x16\xdb\x08\xbe\x2e\x07\x22\x00\x44\x40\x77\x07\x91"
	"\x24\x1f\x96\x6d\xd1\x54\xc5\x5e\x50\x61\x08\xcd\xb5\x81\xbc\x0c"
	"\x35\x8f\xcc\x71\x65\xdf\xe1\x89\xef\x5e\x7e\x95\x64\x95\x8b\x84"
	"\xea\x55\x10\xb5\xc7\xf3\xaa\xbb\x5b"; // for sm2 curve*/

u8 test_key[] = "\xc9\xaf\xa9\xd8\x45\xba\x75\x16\x6b"
	"\x5c\x21\x57\x67\xb1\xd6\x93\x4e\x50\xc3\xdb\x36\xe8\x9b\x12\x7b"
	"\x8a\x62\x2b\x12\x0f\x67\x21\x60\xfe\xd4\xba\x25\x5a\x9d"
	"\x31\xc9\x61\xeb\x74\xc6\x35\x6d\x68\xc0\x49\xb8\x92\x3b\x61\xfa"
	"\x6c\xe6\x69\x62\x2e\x60\xf2\x9f\xb6\x79\x03\xfe\x10\x08\xb8\xbc"
	"\x99\xa4\x1a\xe9\xe9\x56\x28\xbc\x64\xf2\xf1\xb2\x0c\x2d\x7e\x9f"
	"\x51\x77\xa3\xc2\x94\xd4\x46\x22\x99"; // for nist p256

u8 m[] = "\x81\x51\x32\x5d\xcd\xba\xe9\xe0\xff\x95\xf9\xf9\x65\x84\x32\xdb"
	"\xed\xfd\xb2\x09";


const struct akcipher_testvec vecs = {
	.m =
	"\x81\x51\x32\x5d\xcd\xba\xe9\xe0\xff\x95\xf9\xf9\x65\x84\x32\xdb"
	"\xed\xfd\xb2\x09",
	.m_size = 20,
	.algo = OID_id_ecdsa_with_sha1,
	.c =
	"\x30\x44\x02\x20\x61\x34\x0c\x88\xc3\xaa\xeb\xeb\x4f\x6d\x66\x7f"
	"\x67\x2c\xa9\x75\x9a\x6c\xca\xa9\xfa\x88\x11\x31\x30\x39\xee\x4a"
	"\x35\x47\x1d\x32\x02\x20\x6d\x7f\x14\x7d\xac\x08\x94\x41\xbb\x2e"
	"\x2f\xe8\xf7\xa3\xfa\x26\x4b\x9c\x47\x50\x98\xfd\xcf\x6e\x00\xd7"
	"\xc9\x96\xe1\xb8\xb7\xeb",
	.c_size = 70,
};

int m_size = 20;
int algo = OID_id_ecdsa_with_sha1;
// int param_len = 0;

/*const struct akcipher_testvec vecs = {
	.key =
	"\x30\x5f\x02\x01\x01\x04\x18\x6f\xab\x03\x49\x34\xe4\xc0\xfc\x9a"
	"\xe6\x7f\x5b\x56\x59\xa9\xd7\xd1\xfe\xfd\x18\x7e\xe0\x9f\xd4\xa0"
	"\x0a\x06\x08\x2a\x86\x48\xce\x3d\x03\x01\x01\xa1\x34\x03\x32\x00"
	"\x04\xac\x2c\x77\xf5\x29\xf9\x16\x89\xfe\xa0\xea\x5e\xfe\xc7\xf2"
	"\x10\xd8\xee\xa0\xb9\xe0\x47\xed\x56\x3b\xc7\x23\xe5\x76\x70\xbd"
	"\x48\x87\xeb\xc7\x32\xc5\x23\x06\x3d\x0a\x7c\x95\x7b\xc9\x7c\x1c"
	"\x43",
	.key_len = 97,
	.m =
	"\x81\x51\x32\x5d\xcd\xba\xe9\xe0\xff\x95\xf9\xf9\x65\x84\x32\xdb"
	"\xed\xfd\xb2\x09",
	.m_size = 20,
	.algo = OID_id_ecdsa_with_sha1,
	.c =
	"\x30\x35\x02\x19\x00\x98\xc6\xbd\x12\xb2\x3e\xaf\x5e\x2a\x20\x45"
	"\x13\x20\x86\xbe\x3e\xb8\xeb\xd6\x2a\xbf\x66\x98\xff\x02\x18\x57"
	"\xa2\x2b\x07\xde\xa9\x53\x0f\x8d\xe9\x47\x1b\x1d\xc6\x62\x44\x72"
	"\xe8\xe2\x84\x4b\xc2\x5b\x64",
	.c_size = 55,
	.siggen_sigver_test = true,
	};
*/


static int init_ctx(void)
{
	return 0;
}

static int sign()
{
	return 0;
}

static int verify()
{
	return 0;
}


static int __init ecdsa_kernel_module_init(void)
{
	printk(KERN_INFO "Entering sm2 module\n");
	struct crypto_akcipher *tfm;
    char *xbuf[XBUFSIZE];
	struct akcipher_request *req;
	void *outbuf_enc = NULL;
	void *outbuf_dec = NULL;
	
	struct crypto_wait wait;
	unsigned int out_len_max, out_len = 0;
	int err = -ENOMEM;
	struct scatterlist src, dst, src_tab[3];
	const char *m, *c;
	unsigned int m_size, c_size;
	const char *op;
	u8 *key, *ptr;

	if (testmgr_alloc_buf(xbuf))
		return err;

	//tfm = crypto_alloc_akcipher("ecdsa-sm2-generic", 0, 0);
	tfm = crypto_alloc_akcipher("ecdsa-nist-p256-generic", 0, 0);

	printk("crypto_alloc_akcipher\n");

	req = akcipher_request_alloc(tfm, GFP_KERNEL);

	printk("akcipher_request_alloc\n");
	
	if (!req)
		goto free_xbuf;

	crypto_init_wait(&wait);
	
	printk("crypto_init_wait\n");

	/*key = kmalloc(key_len + sizeof(u32) * 2, GFP_KERNEL);
	if (!key)
		goto free_req;

	memcpy(key, test_key, key_len);
	ptr = key + key_len;
	ptr = test_pack_u32(ptr, algo);

	printk("kmalloc\n");
	
	err = crypto_akcipher_set_key_noasn1(tfm, key, key_len);*/

	key = kmalloc(key_len2 + sizeof(u32) * 2, GFP_KERNEL);
	if (!key)
		goto free_req;

	memcpy(key, test_key2, key_len2);
	ptr = key + key_len2;
	ptr = test_pack_u32(ptr, algo);

	printk("kmalloc\n");
	err = crypto_akcipher_set_priv_key(tfm, key, key_len2);
		
	if (err)
		goto free_key;
	
	printk("crypto_akcipher_set_priv_key\n");
/*
	 * First run test which do not require a private key, such as
	 * encrypt or verify.
	 */
	err = -ENOMEM;
	out_len_max = crypto_akcipher_maxsize(tfm);
	outbuf_enc = kzalloc(out_len_max, GFP_KERNEL);
	if (!outbuf_enc)
		goto free_key;


	m = vecs.m;
	m_size = vecs.m_size;
	c = (const char*)kmalloc(vecs.c_size, GFP_KERNEL);
	c_size = vecs.c_size;

	outbuf_dec = kzalloc(out_len_max, GFP_KERNEL);
	if (!outbuf_dec) {
		err = -ENOMEM;
		goto free_all;
	}
	op = "sign";

	if (WARN_ON(m_size > PAGE_SIZE))
		goto free_all;
	memcpy(xbuf[0], m, m_size);

	sg_init_one(&src, xbuf[0], m_size);
	sg_init_one(&dst, outbuf_dec, out_len_max);
	crypto_init_wait(&wait);
	akcipher_request_set_crypt(req, &src, &dst, m_size, out_len_max);
		
	err = crypto_wait_req(crypto_akcipher_sign(req) , &wait);
	if (err) {
		pr_err("alg: akcipher: %s test failed. err %d\n", op, err);
		goto free_all;
	} else {
		printk("alg: akcipher: %s test passed.\n", op);
	}

	out_len = req->dst_len;
	if (out_len < c_size) {
		pr_err("alg: akcipher: %s test failed. Invalid output len %u\n",
		       op, out_len);
		err = -EINVAL;
		goto free_all;
	}
	
	printk("Output generated signature: ");
	for(int i = 0; i < c_size; i++)
		printk("%02x", *(char *)(outbuf_dec + out_len - c_size+i));
	printk("\n");

	
	/* Swap args so we could keep plaintext (digest)
	 * in vecs.m, and cooked signature in vecs.c.
	 */
	m = vecs.c; /* signature */
	m_size = vecs.c_size;
	c = vecs.m; /* digest */
	c_size = vecs.m_size;
	op = "verify";
	
	// printk(KERN_INFO "OP: %s\n", op);

	err = -E2BIG;
	if (WARN_ON(m_size > PAGE_SIZE))
		goto free_all;
	memcpy(xbuf[0], m, m_size);

	sg_init_table(src_tab, 3);
	sg_set_buf(&src_tab[0], xbuf[0], 8);
	sg_set_buf(&src_tab[1], xbuf[0] + 8, m_size - 8);
	
	
	if (WARN_ON(c_size > PAGE_SIZE))
		goto free_all;
	memcpy(xbuf[1], c, c_size);
	sg_set_buf(&src_tab[2], xbuf[1], c_size);
	akcipher_request_set_crypt(req, src_tab, NULL, m_size, c_size);
	
	akcipher_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG,
				      crypto_req_done, &wait);

	
	err = crypto_wait_req(crypto_akcipher_verify(req) , &wait);
	if (err) {
		pr_err("alg: akcipher: %s test failed. err %d\n", op, err);
		goto free_all;
	} else {
		printk("alg: akcipher: %s test passed.\n", op);
	}
	
	err = 0;

free_all:
	kfree(outbuf_dec);
	kfree(outbuf_enc);
free_key:
	kfree(key);
free_req:
	akcipher_request_free(req);
free_xbuf:
	testmgr_free_buf(xbuf);

	return err;
}


static void __exit ecdsa_kernel_module_exit(void)
{
    printk(KERN_INFO "Exiting sm2 module\n");
}

module_init(ecdsa_kernel_module_init);
module_exit(ecdsa_kernel_module_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("zhaoyang");
MODULE_DESCRIPTION("Kernel Crypto API Test");
